command /togglepvp:
	trigger:
		if {pvpstatus::%player's uuid%} is false:
			set {pvpstatus::%player's uuid%} to true
		else if {pvpstatus::%player's uuid%} is true:
			set {pvpstatus::%player's uuid%} to false
		
		if {pvpstatus::%player's uuid%} is true:
			add 0.25 to {expmulti::%player's uuid%}
			send "&8[&dCroplite&8] &aPvP enabled. Enjoy your &e&lExp Multi &8[&e&l+0.25&8] &abonus." to player
		if {pvpstatus::%player's uuid%} is false:
			subtract 0.25 from {expmulti::%player's uuid%}
			send "&8[&dCroplite&8] &cPvP disabled. Farm in peace without the &e&lExp Multi &8[&e&l+0.25&8] &cbonus." to player

command /optogglepvp <player>:
	permission: operator
	trigger:
		if {pvpstatus::%arg-1's uuid%} is false:
			set {pvpstatus::%arg-1's uuid%} to true
		else if {pvpstatus::%arg-1's uuid%} is true:
			set {pvpstatus::%arg-1's uuid%} to false

		if {pvpstatus::%arg-1's uuid%} is true:
			add 0.25 to {expmulti::%arg-1's uuid%}
		if {pvpstatus::%arg-1's uuid%} is false:
			subtract 0.25 from {expmulti::%arg-1's uuid%}

command /leavecombat [<offline player>]:
	permission: operator
	trigger:
		if arg-1 is set:
			set {in-combat::%arg-1's uuid%} to 0
		else:
			set {in-combat::%player's uuid%} to 0

command /toggle-incombat [<offline player>]: 
	permission: operator
	trigger:
		if arg-1 is set:
			if {toggle-incombat::%arg-1's uuid%} is true:
				set {toggle-incombat::%arg-1's uuid%} to false
				send "disabled" to player
			else:
				set {toggle-incombat::%arg-1's uuid%} to true
				send "enabled" to player
		else:
			if {toggle-incombat::%player's uuid%} is true:
				set {toggle-incombat::%player's uuid%} to false
				send "disabled" to player
			else:
				set {toggle-incombat::%player's uuid%} to true
				send "enabled" to player

command /adddamage <integer>:
	permission: operator
	trigger:
		add "damage:%arg-1%" to string list tag "Croplite:scythe-stats" of custom nbt of player's held item

every 1 second:
    loop all players:
        if {in-combat::%loop-player's uuid%} > 0:
            send action bar "&4&lCombat &8[&4&l%{in-combat::%loop-player's uuid%}%s&8]" to loop-player
            remove 1 from {in-combat::%loop-player's uuid%}

on death:
	if attacker is a player:
		if victim is a player:
			if {cropreap::%attacker's uuid%} > 0:
				if {crops::%victim's uuid%} > 0:
					set {_reap} to {cropreap::%attacker's uuid%} percent of {crops::%victim's uuid%}
					set {_reap} to floor({_reap})

					if {_reap} > 0:
						add {_reap} to {crops::%attacker's uuid%}
						send "You have reaped %{_reap}% crops from %victim%." to attacker
					
						remove {_reap} from {crops::%victim's uuid%}
						send "%attacker% has reaped %{_reap}% crops from you." to victim

command /spawnattackdummy:
    permission: operator
    trigger:
        spawn a armor stand at the player
        set {_stand} to last spawned entity
        set name of {_stand} to "attack_dummy"
        summon text display 2 block above {_stand}
        set {_name-display} to last spawned entity
        set name of {name-display} to "attack_dummy-name"

        set display text of {_name-display} to "&4&lAttack Dummy"
        apply drop shadow to {_name-display}
    
        set display billboard of {_name-display} to center
        set display text background color of {_name-display} to bukkitColor(40,0,0,0)

on entity move:
    if name of event-entity is "attack_dummy":
        cancel event

on death:
	if name of victim is "attack_dummy":
		if attacker is a player:
			cancel event
		else if damage cause is burning:
			cancel event

command /killattackdummies:
    permission: operator
    trigger:
        loop all entities:
            if name of loop-entity is "attack_dummy":
                kill loop-entity
            else if name of loop-entity is "Text Display":
                kill loop-entity