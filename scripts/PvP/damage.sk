on damage:
    if attacker is a player:
        if victim is a player:
            if {pvpstatus::%victim's uuid%} is false:
                cancel event
                add 1 to {_temp}
            if damage cause is not burning:
                if {pvpstatus::%attacker's uuid%} is false:
                    cancel event
                    add 2 to {_temp}
            else if damage cause is burning:
                if {pvpstatus::%{last-fire-attacker::%victim's uuid%}'s uuid%} is false:
                    cancel event
                    add 2 to {_temp}

            if {_temp} is 1:
                send "&8[&dCroplite&8] &cThis farmer has PvP disabled." to attacker
                stop
            else if {_temp} is 2:
                send "&8[&dCroplite&8] &cYou have PvP disabled. Enable PvP using /togglepvp." to attacker
                stop
            else if {_temp} is 3:
                send "&8[&dCroplite&8] &cBoth this farmer and you have PvP disabled. Enable PvP using /togglepvp." to attacker
                stop
            else:
                set {in-combat::%victim's uuid%} to 10
                set {in-combat::%attacker's uuid%} to 10

        if damage cause is not burning:
            if attacker's tool is tagged as item tag "minecraft:hoes":
                if attack cooldown of attacker >= 0.5:
                    set {_scytheenchants::*} to string list tag "Croplite:enchants" of custom nbt of attacker's tool
                    set {_scythestats::*} to string list tag "Croplite:scythe-stats" of custom nbt of attacker's tool
                    loop {_scythestats::*}:
                        set {_parts::*} to loop-value split at ":"
                        set {_id} to {_parts::1}

                        if {_id} is "damage":
                            add {_parts::2} parsed as number to {_damage}

                    add {damageboost::%attacker's uuid%} to {_damage}
                    add {strengthpet-additional::%attacker's uuid%} to {_damage}
                        
                    loop {_scytheenchants::*}:
                        set {_parts::*} to loop-value split at ":"
                        set {_id} to {_parts::1}
                    
                        if {_id} is "sharpness":
                            add {_parts::2} parsed as number to {_damage}
                        
                        if {_id} is "fireaspect":
                            set {_time} to timespan({_parts::2} parsed as number, seconds)
                            add 1 seconds to {_time}
                            if victim is a player:
                                if {last-fire-attacker::%victim's uuid%} is not set:
                                    set {last-fire-attacker::%victim's uuid%} to attacker
                                    set {dont-fire-damage::%victim's uuid%} to 1

                                    ignite victim for {_time}
                                    run 1 second later:
                                        set {dont-fire-damage::%victim's uuid%} to 0

                                    run {_time} later:
                                        delete {last-fire-attacker::%victim's uuid%}
                            else if victim is not a player:
                                if {last-fire-attacker::%victim%} is not set:
                                    set {last-fire-attacker::%victim%} to attacker
                                    set {dont-fire-damage::%victim%} to 1

                                    ignite victim for {_time}
                                    run 1 second later:
                                        set {dont-fire-damage::%victim%} to 0

                                    run {_time} later:
                                        delete {last-fire-attacker::%victim%}

                    if hit is not critical:
                        set {_damage} to {_damage} / 2

                    subtract armorEnchantDamage(victim) from {_damage}

                    if {_damage} < 0.5:
                        set {_damage} to 0.5

                    set damage to {_damage}

                    spawnDamageDisplay(attacker, victim, {_damage})
                    
                    if boolean tag "Croplite:crop-mob" of custom nbt of victim is true:
                        set victim's name to "%string tag "Croplite:crop-mob-name" of custom nbt of victim% &8[&c&l%victim's health - damage%&8]"
                else:
                    cancel event
                    send action bar "&4&lWait to Attack" to attacker
            else:
                if attack cooldown of attacker >= 1:
                    #not hoe
                    set {_damage} to 0.5
                    add {damageboost::%attacker's uuid%} to {_damage}
                    set damage to {_damage}

                    spawnDamageDisplay(attacker, victim, {_damage})
                            
                    if boolean tag "Croplite:crop-mob" of custom nbt of victim is true:
                        set victim's name to "%string tag "Croplite:crop-mob-name" of custom nbt of victim% &8[&c&l%victim's health - damage%&8]"
                else:
                    cancel event
                    send action bar "&4&lWait to Attack" to attacker
    else if attacker is a mob:
        if victim is a player:
            set {_scythestats::*} to string list tag "Croplite:scythe-stats" of custom nbt of attacker's tool
            set {_damage} to int tag "Croplite:crop-mob-damage" of custom nbt of attacker

            loop {_scythestats::*}:
                set {_parts::*} to loop-value split at ":"
                set {_id} to {_parts::1}

                if {_id} is "damage":
                    add {_parts::2} parsed as number to {_damage}

            set damage to {_damage}
        else if victim is a mob:
            cancel event
    else if damage cause is burning:
        if victim is a player:
            set {_victim} to victim's uuid
        else if victim is not a player:
            set {_victim} to victim
                
        if {dont-fire-damage::%{_victim}%} < 1:                                
            set damage to 1
            spawnDamageDisplay({last-fire-attacker::%{_victim}%}, victim, 1)

            if boolean tag "Croplite:crop-mob" of custom nbt of victim is true:
                set victim's name to "%string tag "Croplite:crop-mob-name" of custom nbt of victim% &8[&c&l%victim's health - damage%&8]"
    else:
        set damage to 99
        
        if boolean tag "Croplite:crop-mob" of custom nbt of victim is true:
            set victim's name to "%string tag "Croplite:crop-mob-name" of custom nbt of victim% &8[&c&l%victim's health - damage%&8]"
        
local function spawnDamageDisplay(attacker: entity, victim: entity, damage: number):
    set {_attacker-to-victim} to vector between {_victim} and {_attacker}
    set standard length of {_attacker-to-victim} to 0.7

    set y component of {_attacker-to-victim} to a random number between -0.5 and 0.1

    if the facing of {_attacker} is north:
        set x component of {_attacker-to-victim} to a random number between -0.7 and 0.7
    else if the facing of {_attacker} is south:
        set x component of {_attacker-to-victim} to a random number between -0.7 and 0.7
    else if the facing of {_attacker} is east:
        set z component of {_attacker-to-victim} to a random number between -0.7 and 0.7
    else if the facing of {_attacker} is west:
        set z component of {_attacker-to-victim} to a random number between -0.7 and 0.7

    summon text display at {_victim}'s head offset by {_attacker-to-victim}
    set {_damageDisplay} to last spawned entity

    set display text of {_damageDisplay} to "&8[&4&l%{_damage}%&8] [&9&l%armorEnchantDamage({_victim})%&8]"
    apply drop shadow to {_damageDisplay}

    set display billboard of {_damageDisplay} to center
    set display text background color of {_damageDisplay} to bukkitColor(40,0,0,0)

    wait 0.5 seconds
    kill {_damageDisplay}

function armorEnchantDamage(victim: entity):: number: 
    if helmet of {_victim} is not air:
        set {_helmet-tags::*} to string list tag "Croplite:enchants" of custom nbt of {_victim}'s helmet
    if chestplate of {_victim} is not air:
        set {_chestplate-tags::*} to string list tag "Croplite:enchants" of custom nbt of {_victim}'s chestplate
    if leggings of {_victim} is not air:
        set {_leggings-tags::*} to string list tag "Croplite:enchants" of custom nbt of {_victim}'s leggings
    if boots of {_victim} is not air:
        set {_boots-tags::*} to string list tag "Croplite:enchants" of custom nbt of {_victim}'s boots

    set {_helmet-defense} to 0
    set {_chestplate-defense} to 0
    set {_leggings-defense} to 0
    set {_boots-defense} to 0

    if {_helmet-tags::*} is set:
        loop {_helmet-tags::*}:
            set {_parts::*} to loop-value split at ":"
            set {_id} to {_parts::1}
        if {_id} is "prot":
            set {_helmet-defense} to {_parts::2} parsed as number

    if {_chestplate-tags::*} is set:      
        loop {_chestplate-tags::*}:
            set {_parts::*} to loop-value split at ":"
            set {_id} to {_parts::1}
        if {_id} is "prot":
            set {_chestplate-defense} to {_parts::2} parsed as number

    if {_leggings-tags::*} is set:
        loop {_leggings-tags::*}:
            set {_parts::*} to loop-value split at ":"
            set {_id} to {_parts::1}
        if {_id} is "prot":
            set {_leggings-defense} to {_parts::2} parsed as number

    if {_boots-tags::*} is set:
        loop {_boots-tags::*}:
            set {_parts::*} to loop-value split at ":"
            set {_id} to {_parts::1}
        if {_id} is "prot":
            set {_boots-defense} to {_parts::2} parsed as number

    return {_helmet-defense} + {_chestplate-defense} + {_leggings-defense} + {_boots-defense}