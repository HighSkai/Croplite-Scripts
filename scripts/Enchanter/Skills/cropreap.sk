function loadCropReapEnchantGUI(p: player):
	set {_gui} to chest inventory with 3 rows named "&8&lCrop Reap Enchant &8| Page 1"
	
	loop 27 times:
		set {_slot} to loop-number - 1
		set slot {_slot} of {_gui} to gray stained glass pane named " "

	set slot 10 of {_gui} to slot 0 of {_p}'s inventory
	set slot 22 of {_gui} to barrier named "&8[&4&lClose&8]"

	loop integers from 12 to 16:
		set {_slot} to loop-number

		if {cropreap::%loop-integer - 11%::unlocked::%uuid of {_p}%} is equal to true:

			if {cropreap::%loop-integer - 10%::unlocked::%uuid of {_p}%} is equal to true:
				set {_item} to coal named "&8&lCrop Reap &8[&8&l%romanNumeralConversion(loop-integer - 11)%&8] | [&a&lUnlocked&8]"
				make {_item} glint
			else:
				set {_item} to coal named "&8&lCrop Reap &8[&8&l%romanNumeralConversion(loop-integer - 11)%&8]"
				
			loop values "Crop Reap %loop-integer - 11%" of {enchants-Json}: 
				add json-value to {_lore::*}
				
			add "&ePrice:" to {_lore::*}
			add "&e&lEnchant Points &8[&e&l%{cropreap::%loop-integer - 11%::price}%&8]" to {_lore::*}

			delete {_lore::1}
			set lore of {_item} to colored {_lore::*}
			delete {_lore::*}
								
			set slot {_slot} of {_gui} to {_item}
		else:
			set slot {_slot} of {_gui} to gray stained glass pane named " "

	open {_gui} to {_p}

# function loadCropReapEnchantGUI2(p: player):
# 	set {_gui} to chest inventory with 3 rows named "&8&lCrop Reap Enchant &8| Page 2"
		
# 	loop 27 times:
# 		set {_slot} to loop-number - 1
# 		set slot {_slot} of {_gui} to red stained glass pane named " "
	
# 	set slot 10 of {_gui} to slot 0 of {_p}'s inventory
# 	set slot 22 of {_gui} to barrier named "&8[&4&lClose&8]"
# 	set slot 18 of {_gui} to nether star named "&8[&a&lBack&8]"
	
# 	loop integers from 12 to 16:
# 		set {_slot} to loop-number
	
# 		if {cropreap::%loop-integer - 6%::unlocked::%uuid of {_p}%} is equal to true:
	
# 			if {cropreap::%loop-integer - 5%::unlocked::%uuid of {_p}%} is equal to true:
# 				set {_item} to coal named "&8&lCrop Reap &8[&4&l%romanNumeralConversion(loop-integer - 6)%&8] | [&a&lUnlocked&8]"
# 				make {_item} glint
# 			else:
# 				set {_item} to coal named "&8&lCrop Reap &8[&4&l%romanNumeralConversion(loop-integer - 6)%&8]"
					
# 			loop values "Crop Reap %loop-integer - 6%" of {enchants-Json}: 
# 				add json-value to {_lore::*}
					
# 			add "&ePrice:" to {_lore::*}
# 			add "&e&lEnchant Points &8[&e&l%{cropreap::%loop-integer - 6%::price}%&8]" to {_lore::*}
	
# 			delete {_lore::1}
# 			set lore of {_item} to colored {_lore::*}
# 			delete {_lore::*}
									
# 			set slot {_slot} of {_gui} to {_item}
# 		else:
# 			set slot {_slot} of {_gui} to gray stained glass pane named " "
	
# 	open {_gui} to {_p}

on inventory click:
	if event-inventory's name contains "&8&lCrop Reap Enchant &8| Page 1":
		cancel event
		
		if event-slot is 22:
			close player's inventory

		set {_eventslots::*} to 1, 2, 3, 4, and 5
		set {_event-slot} to index of event-slot - 11

		if {_eventslots::*} contain {_event-slot}:
			if {cropreap::%{_event-slot} + 1%::unlocked::%player's uuid%} is equal to false:
				if {cropreap::%{_event-slot}%::unlocked::%player's uuid%} is equal to true:
					if {enchant-points::%player's uuid%} >= {cropreap::%{_event-slot}%::price}:
						remove {cropreap::%{_event-slot}%::price} from {enchant-points::%player's uuid%}
						set {cropreap::%{_event-slot} + 1%::unlocked::%player's uuid%} to true
						add "cropreap:%{_event-slot}%" to string list tag "Croplite:enchants" of custom nbt of slot 0 of player's inventory

						play sound "entity.experience_orb.pickup" to player

						addEnchantLore(player)
						loadCropReapEnchantGUI(player)
						send "&d&lCroplite &aYour scythe has been enchanted with &8&lCrop Reap &8[&8&l%romanNumeralConversion({_event-slot})%&8]&a." to player
					else:
						send "&d&lCroplite &cYou don't have enough &e&lEnchant Points &cto purchase this enchant." to player
			else:
				send "&d&lCroplite &cYou have already purchased this enchant." to player

	# if event-inventory's name contains "&8&lCrop Reap Enchant &8| Page 2":
	# 	cancel event
	# 	if event-slot is 22:
	# 		close player's inventory
	# 	if event-slot is 18:
	# 		close player's inventory
	# 		loadCropReapEnchantGUI(player)

	# 	set {_eventslots::*} to 6, 7, 8, 9, and 10
	# 	set {_event-slot} to index of event-slot - 6

	# 	if {_eventslots::*} contains {_event-slot}:
	# 		if {cropreap::%{_event-slot} + 1%::unlocked::%player's uuid%} is equal to false:
	# 			if {cropreap::%{_event-slot}%::unlocked::%player's uuid%} is equal to true:
	# 				if {enchant-points::%player's uuid%} >= {cropreap::%{_event-slot}%::price}:
	# 					remove {cropreap::%{_event-slot}%::price} from {enchant-points::%player's uuid%}
	# 					set {cropreap::%{_event-slot} + 1%::unlocked::%player's uuid%} to true
	# 					add "cropreap:%{_event-slot}%" to string list tag "Croplite:enchants" of custom nbt of slot 0 of player's inventory
	# 					addEnchantLore(player)
	# 					loadCropReapEnchantGUI2(player)
	# 					send "&d&lCroplite &aYour scythe has been enchanted with &8&lCrop Reap &8[&4&l%romanNumeralConversion({_event-slot})%&8] &afor &e&lEnchant Points &8[&r&e&l%{cropreap::%{_event-slot}%::price}%&r&8]" to player
	# 				else:
	# 					send "&d&lCroplite &cYou don't have enough &e&lEnchant Points &cto unlock this enchant" to player
	# 		else:
	# 			send "&d&lCroplite &cYou have already purchased this enchant" to player

command /resetcropreap:
	trigger:
		set {cropreap::1::unlocked::%player's uuid%} to true
		set {cropreap::2::unlocked::%player's uuid%} to false
		set {cropreap::3::unlocked::%player's uuid%} to false
		set {cropreap::4::unlocked::%player's uuid%} to false
		set {cropreap::5::unlocked::%player's uuid%} to false