function loadExperienceEnchantGUI(p: player):
	set {_gui} to chest inventory with 3 rows named "&e&lExperience &8| Page 1"
	
	loop 27 times:
		set {_slot} to loop-number - 1
		set {_item} to yellow stained glass pane
		hide {_item}'s tooltip
		set slot {_slot} of {_gui} to {_item}

	set slot 10 of {_gui} to slot 0 of {_p}'s inventory
	set slot 22 of {_gui} to barrier named "&8[&4&lClose&8]"
	set slot 26 of {_gui} to nether star named "&8[&a&lNext Page&8]"

	loop integers from 12 to 16:
		set {_slot} to loop-number

		if {experience::%loop-integer - 11%::unlocked::%uuid of {_p}%} is equal to true:
			if {experience::%loop-integer - 10%::unlocked::%uuid of {_p}%} is equal to true:
				set {_item} to gold ingot named "&e&lExperience &8[&e&l%romanNumeralConversion(loop-integer - 11)%&8] | &a&lPurchased"
				make {_item} glint
			else:
				set {_item} to gold ingot named "&e&lExperience &8[&e&l%romanNumeralConversion(loop-integer - 11)%&8]"
				
			loop values "Experience %loop-integer - 11%" of {enchants-Json}: 
				add loop-value-2 to {_lore::*}

			add "&ePrice:" to {_lore::*}
			add "&e&lEnchant Points &8[&e&l%{experience::%loop-integer - 11%::price}%&8]" to {_lore::*}

			delete {_lore::1}
			set lore of {_item} to colored {_lore::*}
			delete {_lore::*}
								
			set slot {_slot} of {_gui} to {_item}
		else:
			set {_item} to gray stained glass pane
			hide {_item}'s tooltip
			set slot {_slot} of {_gui} to {_item}

	open {_gui} to {_p}

function loadExperienceEnchantGUI2(p: player):
	set {_gui} to chest inventory with 3 rows named "&e&lExperience &8| Page 2"
	
	loop 27 times:
		set {_slot} to loop-number - 1
		set {_item} to yellow stained glass pane
		hide {_item}'s tooltip
		set slot {_slot} of {_gui} to {_item}

	set slot 10 of {_gui} to slot 0 of {_p}'s inventory
	set slot 22 of {_gui} to barrier named "&8[&4&lClose&8]"
	set slot 18 of {_gui} to nether star named "&8[&a&lPrevious Page&8]"

	loop integers from 12 to 16:
		set {_slot} to loop-number

		if {experience::%loop-integer - 6%::unlocked::%uuid of {_p}%} is equal to true:
			if {experience::%loop-integer - 5%::unlocked::%uuid of {_p}%} is equal to true:
				set {_item} to gold ingot named "&e&lExperience &8[&e&l%romanNumeralConversion(loop-integer - 6)%&8] | &a&lPurchased"
				make {_item} glint
			else:
				set {_item} to gold ingot named "&e&lExperience &8[&e&l%romanNumeralConversion(loop-integer - 6)%&8]"
				
			loop values "Experience %loop-integer - 6%" of {enchants-Json}: 
				add loop-value-2 to {_lore::*}

			add "&ePrice:" to {_lore::*}
			add "&e&lEnchant Points &8[&e&l%{experience::%loop-integer - 6%::price}%&8]" to {_lore::*}

			delete {_lore::1}
			set lore of {_item} to colored {_lore::*}
			delete {_lore::*}
								
			set slot {_slot} of {_gui} to {_item}
		else:
			set {_item} to gray stained glass pane
			hide {_item}'s tooltip
			set slot {_slot} of {_gui} to {_item}

	open {_gui} to {_p}

on inventory click:
	if event-inventory is not player's inventory:
		if event-inventory's name contains "&e&lExperience &8| Page 1":
			cancel event
			
			if event-slot is 22:
				play sound "minecraft:ui.button.click" to player
				close player's inventory
			if event-slot is 26:
				play sound "minecraft:ui.button.click" to player
				loadExperienceEnchantGUI2(player)

			set {_slots::*} to 12, 13, 14, 15, and 16
			set {_slot} to index of event-slot - 11

			if {_slots::*} contains event-slot:
				if {experience::%{_slot} + 1%::unlocked::%player's uuid%} is equal to false:
					if {experience::%{_slot}%::unlocked::%player's uuid%} is equal to true:
						if {enchant-points::%player's uuid%} >= {experience::%{_slot}%::price}:
							remove {experience::%{_slot}%::price} from {enchant-points::%player's uuid%}
							set {experience::%{_slot} + 1%::unlocked::%player's uuid%} to true
							add "experience:%{_slot}%" to string list tag "Croplite:enchants" of custom nbt of slot 0 of player's inventory

							if {holdingscythe::%player's uuid%} is true:
								add 0.1 to {expmulti::%player's uuid%}

							addEnchantLore(player)
							loadExperienceEnchantGUI(player)

							checkTrackorChat(player)

							play sound "entity.experience_orb.pickup" to player
							send "&5&lElliott &aSuccessfully purchased enchant." to player
						else:
							play sound "minecraft:entity.villager.no" to player
							send "&5&lElliott &cInsufficient &e&lEnchant Points &cfor enchant." to player
				else:
					play sound "minecraft:entity.villager.no" to player
					send "&5&lElliott &cAlready purchased enchant." to player

		if event-inventory's name contains "&e&lExperience &8| Page 2":
			cancel event
			
			if event-slot is 22:
				play sound "minecraft:ui.button.click" to player
				close player's inventory
			if event-slot is 18:
				play sound "minecraft:ui.button.click" to player
				loadExperienceEnchantGUI(player)

			set {_slots::*} to 12, 13, 14, 15, and 16
			set {_slot} to index of event-slot - 6

			if {_slots::*} contains event-slot:
				if {experience::%{_slot} + 1%::unlocked::%player's uuid%} is equal to false:
					if {experience::%{_slot}%::unlocked::%player's uuid%} is equal to true:
						if {enchant-points::%player's uuid%} >= {experience::%{_slot}%::price}:
							remove {experience::%{_slot}%::price} from {enchant-points::%player's uuid%}
							set {experience::%{_slot} + 1%::unlocked::%player's uuid%} to true
							add "experience:%{_slot}%" to string list tag "Croplite:enchants" of custom nbt of slot 0 of player's inventory

							if {holdingscythe::%player's uuid%} is true:
								add 0.1 to {expmulti::%player's uuid%}

							addEnchantLore(player)
							loadExperienceEnchantGUI2(player)

							checkTrackorChat(player)

							play sound "entity.experience_orb.pickup" to player
							send "&5&lElliott &aSuccessfully purchased enchant." to player
						else:
							play sound "minecraft:entity.villager.no" to player
							send "&5&lElliott &cInsufficient &e&lEnchant Points &cfor enchant." to player
				else:
					play sound "minecraft:entity.villager.no" to player
					send "&5&lElliott &cAlready purchased enchant." to player

function setExperienceEnchantPrices():
    set {experience::1::price} to 1
    set {experience::2::price} to 2
    set {experience::3::price} to 3
    set {experience::4::price} to 4
    set {experience::5::price} to 5
    set {experience::6::price} to 6
    set {experience::7::price} to 7
    set {experience::8::price} to 8
    set {experience::9::price} to 9
    set {experience::10::price} to 10

function resetExperienceEnchant(p: player):
	set {experience::1::unlocked::%uuid of {_p}%} to true
	set {experience::2::unlocked::%uuid of {_p}%} to false
	set {experience::3::unlocked::%uuid of {_p}%} to false
	set {experience::4::unlocked::%uuid of {_p}%} to false
	set {experience::5::unlocked::%uuid of {_p}%} to false
	set {experience::6::unlocked::%uuid of {_p}%} to false
	set {experience::7::unlocked::%uuid of {_p}%} to false
	set {experience::8::unlocked::%uuid of {_p}%} to false
	set {experience::9::unlocked::%uuid of {_p}%} to false
	set {experience::10::unlocked::%uuid of {_p}%} to false
	set {experience::11::unlocked::%uuid of {_p}%} to false

command /reset-experienceenchant [<player>]:
	permission: operator
	trigger:
		if arg-1 is set:
			resetExperienceEnchant(arg-1)
		else:
			resetExperienceEnchant(player)